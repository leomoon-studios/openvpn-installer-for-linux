#!/bin/bash

############################################################################
########## INFO ############################################################
############################################################################
### ABOUT:
####### This script will setup a secure OpenVPN server on systems below:
#######   Alma Linux 8
#######   Amazon Linux 2
#######   Arch Linux
#######   CentOS 7
#######   CentOS >= 8
#######   Devian >= 10
#######   Fedora >= 35
#######   Oracle Linux 8
#######   Rocky Linux 8
#######   Ubuntu >= 18.04
### AUTOHR:
####### Amin Babaeipanah
### USAGE:
####### Run it using "sudo ./openvpn-installer"
####### Follow on-screen instructions

############################################################################
########## INTERNAL VARIABLES ##############################################
############################################################################
VER="3.1.0" #232201
SCRIPTDIR="$(dirname $(readlink -f $0))"
LINK="https://lms.to/lmovpn"
CLRX=$(echo -e "\e[39m ") #color reset
CLRE=$(echo -e "\e[31m") #color red
CLRS=$(echo -e "\e[32m") #color green
CLRC=$(echo -e "\e[33m") #color yellow
CLRQ=$(echo -e "\e[34m") #color light blue
CLRI=$(echo -e "\e[36m") #color cyan
SYME=$(echo -e "[x]")
SYMS=$(echo -e "[\xE2\x9C\x93]")
SYMC=$(echo -e "[!]")
SYMQ=$(echo -e "[?]")
SYMI=$(echo -e "[i]")
NETCARD=$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)' | head -1)
GATEWAY=$(ip -4 route ls | awk '/default/ { print $3 }')
LANIP=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk -F'[/ ]+' '{print $3}')
WELCOMEMSG="$CLRI
 ####################################################################
 ####### OpenVPN Installer ##########################################
 ####### for Linux v$VER ############################################
 ####################################################################
 This script will setup a secure OpenVPN server.

 Supported distros:
   Alma Linux 8
   Amazon Linux 2
   Arch Linux
   CentOS 7
   CentOS >= 8
   Devian >= 10
   Fedora >= 35
   Oracle Linux 8
   Rocky Linux 8
   Ubuntu >= 18.04

 Latest version and documentation at:
      $LINK
$CLRX"
SILENTMSG="$CLRI $SYMI Running in SILENT mode...$CLRX"
############################################################################
########## FUNCTIONS #######################################################
############################################################################
function init() {
    #check root
    if [ "$EUID" -ne 0 ]; then #checking root
        echo "$CLRE $SYME Please run this script as root.$CLRX"
        exit 1
    fi
    #check if tun is available
    if [ ! -e /dev/net/tun ]; then
        echo "$CLRE $SYME TUN is not available. Please enable TUN and run this script again.$CLRX"
        exit 1
    fi
    #check netcard
    if [[ -z $NETCARD ]]; then
        echo "$CLRE $SYME Failed to detect the public interface. Please make sure you have an active internet connection.$CLRX"
    fi
    #detect nogroup or nobody
    if grep -qs "^nogroup:" /etc/group; then
        NOGROUP=nogroup
    else
        NOGROUP=nobody
    fi
}

function osCheck() {
    if [[ -e /etc/debian_version ]]; then #debian, rasbian, ubuntu
        OS="debian"
        source /etc/os-release
        if [[ $ID == "debian" || $ID == "raspbian" ]]; then
            if [[ $VERSION_ID -lt 9 ]]; then
                echo "$CLRC $SYMC Debian $VERSION_ID in not supported.$CLRX"
                until [[ $CONTINUE =~ (y|n) ]]; do
                    read -rp "$CLRQ $SYMQ Do you want to continue at your own risk?$CLRX" -e CONTINUE
                done
                if [[ $CONTINUE == "n" ]]; then
                    exit 1
                fi
            fi
        elif [[ $ID == "ubuntu" ]]; then
            OS="ubuntu"
            MAJOR_UBUNTU_VERSION=$(echo "$VERSION_ID" | cut -d '.' -f1)
            if [[ $MAJOR_UBUNTU_VERSION -lt 18 ]]; then
                echo "$CLRC $SYMC Ubuntu $VERSION_ID in not supported.$CLRX"
                until [[ $CONTINUE =~ (y|n) ]]; do
                    read -rp "$CLRQ $SYMQ Do you want to continue at your own risk?$CLRX" -e CONTINUE
                done
                if [[ $CONTINUE == "n" ]]; then
                    exit 1
                fi
            fi
        fi
    elif [[ -e /etc/system-release ]]; then #amzn, centos, fedora
        source /etc/os-release
        if [[ $ID == "fedora" || $ID_LIKE == "fedora" ]]; then
            OS="fedora"
        fi
        if [[ $ID == "centos" || $ID == "rocky" || $ID == "almalinux" ]]; then
            OS="centos"
            if [[ ${VERSION_ID%.*} -lt 7 ]]; then
                echo "$CLRE $SYME CentOS $VERSION_ID in not supported.$CLRX"
                echo "$CLRE     This script only supports CentOS 7 and CentOS 8.$CLRX"
                exit 1
            fi
        fi
        if [[ $ID == "ol" ]]; then
            OS="oracle"
            if [[ ! $VERSION_ID =~ (8) ]]; then
                echo "$CLRE $SYME Oracle Linux $VERSION_ID in not supported.$CLRX"
                echo "$CLRE     This script only supports Oracle Linux 8.$CLRX"
                exit 1
            fi
        fi
        if [[ $ID == "amzn" ]]; then
            OS="amzn"
            if [[ $VERSION_ID != "2" ]]; then
                echo "$CLRE $SYME Amazon Linux $VERSION_ID in not supported.$CLRX"
                echo "$CLRE     This script only supports Amazon Linux 2.$CLRX"
                exit 1
            fi
        fi
    elif [[ -e /etc/arch-release ]]; then #archlinux
        OS="arch"
    else
        echo "$CLRE $SYME Unkown Linux distro. This script supports Alma Linux 8, Amazon Linux 2, Arch Linux, CentOS, Debian 9+, Fedora 27+, Oracle Linux 8, Rocky Linux 8 and Ubuntu 16.04+.$CLRX"
        exit 1
    fi
}

function installMenu() {
    echo "$WELCOMEMSG"
    #if silent, show the flags
    if [[ $SILENT == "y" ]]; then echo "$SILENTMSG"; fi
    #define port
    until [[ $PORT =~ ^[0-9]+$ ]] && [ "$PORT" -ge 1 ] && [ "$PORT" -le 65535 ]; do
        read -rp "$CLRQ $SYMQ What port do you want OpenVPN to use (default is 1194)? [1-65535]:$CLRX" -e -i 1194 PORT
        echo ""
    done
    #define protocol
    until [[ $PROTOCOL =~ ^(tcp|TCP|udp|UDP)$ ]]; do
        read -rp "$CLRQ $SYMQ What protocol OpenVPN should use (default is UDP)? [TCP/UDP]:$CLRX" -e -i UDP PROTOCOL
        echo ""
    done
    PROTOCOL=${PROTOCOL,,}
    #define dns
    until [[ $DNS_TYPE =~ ^[0-9]+$ ]] && [ "$DNS_TYPE" -ge 1 ] && [ "$DNS_TYPE" -le 11 ]; do
        echo "$CLRI $SYMI DNS resolver:"
        echo "       1- Google (global)"
        echo "       2- Cloudflare (global)"
        echo "       3- AdGuard DNS (global)"
        echo "       4- OpenDNS (global)"
        echo "       5- Quad9 (global)"
        echo "       6- Quad9 uncensored (global)"
        echo "       7- NextDNS (global)"
        echo "       8- FDN (France)"
        echo "       9- DNS.WATCH (Germany)"
        echo "      10- Yandex Basic (Russia)"
        echo "      11- Current system resolvers in /etc/resolv.conf$CLRX"
        read -rp "$CLRQ $SYMQ Which DNS resolver you want to use? [1-11]:$CLRX" -e -i 1 DNS_TYPE
        echo ""
    done
    #define compression
    until [[ $COMPRESSION =~ (y|n) ]]; do
        read -rp "$CLRQ $SYMQ Do you want to enable compression (not recommended)? [y/n]:$CLRX" -e -i n COMPRESSION
        echo ""
    done
    if [[ $COMPRESSION == "y" ]]; then
        until [[ $COMPRESSION_TYPE =~ ^[1-3]$ ]]; do
            echo "$CLRI $SYMI Compression type:"
            echo "      1- LZ4-v2"
            echo "      2- LZ4"
            echo "      3- LZO$CLRX"
            read -rp "$CLRQ $SYMQ Which compression algorithm you want to use? [1-3]:$CLRX" -e -i 1 COMPRESSION_TYPE
            echo ""
        done
        case $COMPRESSION_TYPE in
        1)
            COMPRESSION_ALGO="lz4-v2"
            ;;
        2)
            COMPRESSION_ALGO="lz4"
            ;;
        3)
            COMPRESSION_ALGO="lzo"
            ;;
        esac
    fi
    #data cipher
    until [[ $DATACIPHER_TYPE =~ ^[1-6]$ ]]; do
        echo "$CLRI $SYMI Cipher for data channel:"
        echo "      1- AES-256-GCM (recommended)"
        echo "      2- AES-192-GCM"
        echo "      3- AES-128-GCM"
        echo "      4- AES-256-CBC"
        echo "      5- AES-192-CBC"
        echo "      6- AES-128-CBC$CLRX"
        read -rp "$CLRQ $SYMQ Which cipher you want to use for data channel? [1-6]:$CLRX" -e -i 1 DATACIPHER_TYPE
        echo ""
    done
    case $DATACIPHER_TYPE in
    1)
        DATA_CIPHER="AES-256-GCM"
        ;;
    2)
        DATA_CIPHER="AES-192-GCM"
        ;;
    3)
        DATA_CIPHER="AES-128-GCM"
        ;;
    4)
        DATA_CIPHER="AES-256-CBC"
        ;;
    5)
        DATA_CIPHER="AES-192-CBC"
        ;;
    6)
        DATA_CIPHER="AES-128-CBC"
        ;;
    esac
    #curve or key size based on cert type
    until [[ $CERT_TYPE =~ ^[1-2]$ ]]; do
        echo "$CLRI $SYMI Certificate type:"
        echo "      1- ECDSA (recommended)"
        echo "      2- RSA$CLRX"
        read -rp "$CLRQ $SYMQ Which certificate you want to use? [1-2]:$CLRX" -e -i 1 CERT_TYPE
        echo ""
    done
    case $CERT_TYPE in
    1)
        until [[ $CURVE_TYPE =~ ^[1-3]$ ]]; do
            echo "$CLRI $SYMI Certificate curve:"
            echo "      1- prime256v1 (recommended)"
            echo "      2- secp384r1"
            echo "      3- secp521r1$CLRX"
            read -rp "$CLRQ $SYMQ Which curve you want to use for the certificate's key? [1-3]:$CLRX" -e -i 1 CURVE_TYPE
            echo ""
        done
        case $CURVE_TYPE in
        1)
            CERT_CURVE="prime256v1"
            ;;
        2)
            CERT_CURVE="secp384r1"
            ;;
        3)
            CERT_CURVE="secp521r1"
            ;;
        esac
        ;;
    2)
        until [[ $RSA_TYPE =~ ^[1-3]$ ]]; do
            echo "$CLRI $SYMI RSA key size:"
            echo "      1- 2048 bits (recommended)"
            echo "      2- 3072 bits"
            echo "      3- 4096 bits$CLRX"
            read -rp "$CLRQ $SYMQ Which key size you want to use for RSA certificate? [1-3]:$CLRX" -e -i 1 RSA_TYPE
            echo ""
        done
        case $RSA_TYPE in
        1)
            RSA_KEY_SIZE="2048"
            ;;
        2)
            RSA_KEY_SIZE="3072"
            ;;
        3)
            RSA_KEY_SIZE="4096"
            ;;
        esac
        ;;
    esac
    #control cipher based on cert type
    case $CERT_TYPE in
    1)
        until [[ $CONTROLCIPHER_TYPE =~ ^[1-2]$ ]]; do
            echo "$CLRI $SYMI Cipher for control channel:"
            echo "      1- ECDHE-ECDSA-AES-128-GCM-SHA256 (recommended)"
            echo "      2- ECDHE-ECDSA-AES-256-GCM-SHA384$CLRX"
            read -rp "$CLRQ $SYMQ Which cipher you want to use for control channel? [1-2]:$CLRX" -e -i 1 CONTROLCIPHER_TYPE
            echo ""
        done
        case $CONTROLCIPHER_TYPE in
        1)
            CONTROL_CIPHER="TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256"
            ;;
        2)
            CONTROL_CIPHER="TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384"
            ;;
        esac
        ;;
    2)
        until [[ $CONTROLCIPHER_TYPE =~ ^[1-2]$ ]]; do
            echo "$CLRI $SYMI Cipher for control channel:"
            echo "      1- ECDHE-RSA-AES-128-GCM-SHA256 (recommended)"
            echo "      2- ECDHE-RSA-AES-256-GCM-SHA384$CLRX"
            read -rp "$CLRQ $SYMQ Which cipher you want to use for control channel? [1-2]:$CLRX" -e -i 1 CONTROLCIPHER_TYPE
            echo ""
        done
        case $CONTROLCIPHER_TYPE in
        1)
            CONTROL_CIPHER="TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256"
            ;;
        2)
            CONTROL_CIPHER="TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384"
            ;;
        esac
        ;;
    esac
    #dh type
    until [[ $DH_TYPE =~ [1-2] ]]; do
        echo "$CLRI $SYMI Diffie-Hellman key type:"
        echo "      1- ECDH (recommended)"
        echo "      2- DH$CLRX"
        read -rp "$CLRQ $SYMQ What kind of Diffie-Hellman key you want to use? [1-2]:$CLRX" -e -i 1 DH_TYPE
        echo ""
    done
    case $DH_TYPE in
    1)
        while [[ $DHCURVE_TYPE != "1" && $DHCURVE_TYPE != "2" && $DHCURVE_TYPE != "3" ]]; do
            echo "$CLRI $SYMI ECDH curve type:"
            echo "      1- prime256v1 (recommended)"
            echo "      2- secp384r1"
            echo "      3- secp521r1$CLRX"
            read -rp "$CLRQ $SYMQ Which curve type you want to use for the ECDH key? [1-3]:$CLRX" -e -i 1 DHCURVE_TYPE
            echo ""
        done
        case $DHCURVE_TYPE in
        1)
            DH_CURVE="prime256v1"
            ;;
        2)
            DH_CURVE="secp384r1"
            ;;
        3)
            DH_CURVE="secp521r1"
            ;;
        esac
        ;;
    2)
        until [[ $DHSIZE_TYPE =~ ^[1-3]$ ]]; do
            echo "$CLRI $SYMI DH key size:"
            echo "      1- 2048 bits (recommended)"
            echo "      2- 3072 bits"
            echo "      3- 4096 bits$CLRX"
            read -rp "$CLRQ $SYMQ What size of Diffie-Hellman key you want to use? [1-3]:$CLRX" -e -i 1 DHSIZE_TYPE
            echo ""
        done
        case $DHSIZE_TYPE in
        1)
            DH_SIZE="2048"
            ;;
        2)
            DH_SIZE="3072"
            ;;
        3)
            DH_SIZE="4096"
            ;;
        esac
        ;;
    esac
    until [[ $HMAC_TYPE =~ ^[1-3]$ ]]; do
        echo "$CLRI $SYMI Digest algorithm:"
        echo "      1- SHA-256 (recommended)"
        echo "      2- SHA-384"
        echo "      3- SHA-512$CLRX"
        read -rp "$CLRQ $SYMQ Which digest algorithm you want to use for HMAC? [1-3]:$CLRX" -e -i 1 HMAC_TYPE
        echo ""
    done
    case $HMAC_TYPE in
    1)
        HMAC="SHA256"
        ;;
    2)
        HMAC="SHA384"
        ;;
    3)
        HMAC="SHA512"
        ;;
    esac
    until [[ $TLS_TYPE =~ [1-2] ]]; do
        echo "$CLRI $SYMI Control channel security mechanism:"
        echo "      1- tls-crypt (recommended)"
        echo "      2- tls-auth$CLRX"
        read -rp "$CLRQ $SYMQ Which control channel security mechanism you want to use? [1-2]:$CLRX" -e -i 1 TLS_TYPE
        echo ""
    done
    #domain
    until [[ $DOMAIN_Q =~ (y|n) ]]; do
        read -rp "$CLRQ $SYMQ Do you have a domain configured on this server (optional)? [y/n]:$CLRX" -e -i n DOMAIN_Q
        echo ""
    done
    if [[ $DOMAIN_Q == "y" ]]; then
        read -rp "$CLRQ $SYMQ What is the fully qualified domain name (example: mydomain.com)?:$CLRX" DOMAIN
        echo ""
    fi
    if [[ ! -z "$DOMAIN" ]]; then
        WANIP=$DOMAIN
    else
        if ! WANIP=$(curl -f --retry 5 --retry-connrefused -4 "https://icanhazip.com"); then
            WANIP=$(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d '"')
        fi
    fi
    echo "$CLRI $SYMI These are the options you chose:"
    echo "      Port: $PORT"
    echo "      Protocol: $PROTOCOL"
    case $DNS_TYPE in
    1)
        echo "      DNS Resolver: Google (global)"
        ;;
    2)
        echo "      DNS Resolver: Cloudflare (global)"
        ;;
    3)
        echo "      DNS Resolver: AdGuard DNS (global)"
        ;;
    4)
        echo "      DNS Resolver: OpenDNS (global)"
        ;;
    5)
        echo "      DNS Resolver: Quad9 (global)"
        ;;
    6)
        echo "      DNS Resolver: Quad9 uncensored (global)"
        ;;
    7)
        echo "      DNS Resolver: NextDNS (global)"
        ;;
    8)
        echo "      DNS Resolver: FDN (France)"
        ;;
    9)
        echo "      DNS Resolver: DNS.WATCH (Germany)"
        ;;
    10)
        echo "      DNS Resolver: Yandex Basic (Russia)"
        ;;
    11)
        echo "      DNS Resolver: Current system resolvers"
        ;;
    esac
    if [[ ! -z "$COMPRESSION_ALGO" ]]; then
        echo "      Compression Algo: $COMPRESSION_ALGO"
    else
        echo "      Compression Algo: none"
    fi
    echo "      Data Cipher: $DATA_CIPHER"
    if [[ $CERT_TYPE == 1 ]]; then
        echo "      Cert Curve: $CERT_CURVE"
    else
        echo "      RSA Key Size: $RSA_KEY_SIZE"
    fi
    echo "      Channel Cipher: $CONTROL_CIPHER"
    if [[ $DH_TYPE == 1 ]]; then
        echo "      DH Type: ECDH"
        echo "      DH Curve: $DH_CURVE"
    else
        echo "      DH Type: DH"
        echo "      DH Size: $DH_SIZE"
    fi
    echo "      HMAC Type: $HMAC"
    if [[ $TLS_TYPE == 1 ]]; then
        echo "      TLS Type: tls-crypt"
    else
        echo "      TLS Type: tls-auth"
    fi
    echo "      DOMAIN/IP: $WANIP"
    echo "$CLRX"
    until [[ $FINALIZE =~ (y|n) ]]; do
        read -rp "$CLRQ $SYMQ Do you want to continue? [y/n]:$CLRX" -e -i n FINALIZE
    done
    if [[ $FINALIZE == "n" ]]; then
        exit 1
    fi
}

function installOvpn() {
    if [[ $SILENT == "y" ]]; then
        PORT=${PORT:-1194}
        PROTOCOL=${PROTOCOL:-udp}
        DNS_TYPE=${DNS_TYPE:-1}
        COMPRESSION=${COMPRESSION:-n}
        COMPRESSION_TYPE=${COMPRESSION_TYPE:-1}
        DATACIPHER_TYPE=${CIPHER_TYPE:-1}
        CERT_TYPE=${CERT_TYPE:-1}
        CURVE_TYPE=${CURVE_TYPE:-1}
        RSA_TYPE=${RSA_TYPE:-1}
        CONTROLCIPHER_TYPE=${CONTROLCIPHER_TYPE:-1}
        DH_TYPE=${DH_TYPE:-1}
        DHCURVE_TYPE=${DHCURVE_TYPE:-1}
        DHSIZE_TYPE=${DHSIZE_TYPE:-1}
        HMAC_TYPE=${HMAC_TYPE:-1}
        TLS_TYPE=${TLS_TYPE:-1}
        DOMAIN_Q=${DOMAIN_Q:-n}
        CONTINUE=${CONTINUE:-y}
        FINALIZE=${FINALIZE:-y}
    fi
    #run installMenu to get values
    installMenu
    #get wan ip
    if [[ ! -z $DOMAIN ]]; then
        WANIP=$DOMAIN
    else
        if ! WANIP=$(curl -f --retry 5 --retry-connrefused -4 "https://icanhazip.com"); then
            WANIP=$(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d '"')
        fi
    fi
    #enable routing
    echo 'net.ipv4.ip_forward=1' > /etc/sysctl.d/99-openvpn.conf
    sysctl --system
    #only install openvpn, if it's not installed
    if [[ ! -e /etc/openvpn/server.conf ]]; then
        if [[ $OS =~ (debian|ubuntu) ]]; then
            apt-get update
            apt-get -y install ca-certificates gnupg
            apt-get install -y openvpn iptables openssl wget ca-certificates curl
        elif [[ $OS == 'centos' ]]; then
            yum install -y epel-release
            yum install -y openvpn iptables openssl wget ca-certificates curl tar 'policycoreutils-python*'
        elif [[ $OS == 'oracle' ]]; then
            yum install -y oracle-epel-release-el8
            yum-config-manager --enable ol8_developer_EPEL
            yum install -y openvpn iptables openssl wget ca-certificates curl tar policycoreutils-python-utils
        elif [[ $OS == 'amzn' ]]; then
            amazon-linux-extras install -y epel
            yum install -y openvpn iptables openssl wget ca-certificates curl
        elif [[ $OS == 'fedora' ]]; then
            dnf install -y openvpn iptables openssl wget ca-certificates curl policycoreutils-python-utils
        elif [[ $OS == 'arch' ]]; then
            pacman --needed --noconfirm -Syu openvpn iptables openssl wget ca-certificates curl
        fi
        #remove old easy-rsa that get installed sometimes
        if [[ -d /etc/openvpn/easy-rsa/ ]]; then
            rm -rf /etc/openvpn/easy-rsa/
        fi
    fi
    #get iptables exec
    IPTABLESPATH=$(command -v iptables)
    #install easy-rsa
    if [[ ! -d /etc/openvpn/easy-rsa/ ]]; then
        EASYRSAVER="3.1.2"
        #wget https://github.com/OpenVPN/easy-rsa/releases/download/v${EASYRSAVER}/EasyRSA-${EASYRSAVER}.tgz -O ~/easy-rsa.tgz
        EASYRSALINK="https://github.com/OpenVPN/easy-rsa/releases/download/v${EASYRSAVER}/EasyRSA-${EASYRSAVER}.tgz"
        mkdir /etc/openvpn/easy-rsa
        { wget -qO- "$EASYRSALINK" 2>/dev/null || curl -sL "$EASYRSALINK" ; } | tar xz -C /etc/openvpn/easy-rsa/ --no-same-owner --strip-components 1
    fi
    if [[ ! -d /etc/openvpn/client ]]; then mkdir -p /etc/openvpn/client; fi
    cd /etc/openvpn/easy-rsa/
    case $CERT_TYPE in
    1)
        echo "set_var EASYRSA_ALGO ec" >vars
        echo "set_var EASYRSA_CURVE $CERT_CURVE" >>vars
        ;;
    2)
        echo "set_var EASYRSA_KEY_SIZE $RSA_KEY_SIZE" >vars
        ;;
    esac
    #generate random SERVER_CN and SERVER_NAME
    SERVER_CN="cn_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"
    echo "$SERVER_CN" > SERVER_CN
    SERVER_NAME="server_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"
    echo "$SERVER_NAME" > SERVER_NAME
    echo "set_var EASYRSA_REQ_CN $SERVER_CN" >>vars
    ./easyrsa init-pki
    EASYRSA_CA_EXPIRE=3650 ./easyrsa --batch --req-cn="$SERVER_CN" build-ca nopass #generate ca and key
    #generate dh only for none ec
    if [[ $DH_TYPE == "2" ]]; then
        openssl dhparam -out dh.pem $DH_SIZE
    fi
    EASYRSA_CA_EXPIRE=3650 ./easyrsa --batch build-server-full "$SERVER_NAME" nopass #generate server cert
    EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl #generate revoke cert
    #tls-crypt/tls-auth
    case $TLS_TYPE in
    1)
        openvpn --genkey --secret /etc/openvpn/tls-crypt.key
        ;;
    2)
        openvpn --genkey --secret /etc/openvpn/tls-auth.key
        ;;
    esac
    #copy all generated certs
    cp pki/ca.crt pki/private/ca.key "pki/issued/$SERVER_NAME.crt" "pki/private/$SERVER_NAME.key" pki/crl.pem /etc/openvpn
    if [[ $DH_TYPE == "2" ]]; then
        cp dh.pem /etc/openvpn/dh.pem
    fi
    chown -R root:root /etc/openvpn/easy-rsa/
    chown nobody:$NOGROUP /etc/openvpn/crl.pem
    chmod o+x /etc/openvpn #needed for openvpn to run start() on CRL file
    echo "port $PORT" > /etc/openvpn/server.conf
    echo "proto ${PROTOCOL}4" >> /etc/openvpn/server.conf
    echo "dev tun
sndbuf 0
rcvbuf 0" >> /etc/openvpn/server.conf
    #dns
    case $DNS_TYPE in
    1) #google
        echo 'push "dhcp-option DNS 8.8.8.8"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 8.8.4.4"' >> /etc/openvpn/server.conf
        ;;
    2) #cloudflare
        echo 'push "dhcp-option DNS 1.0.0.1"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 1.1.1.1"' >> /etc/openvpn/server.conf
        ;;
    3) #adguard dns
        echo 'push "dhcp-option DNS 94.140.14.14"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 94.140.15.15"' >> /etc/openvpn/server.conf
        ;;
    4) #opendns
        echo 'push "dhcp-option DNS 208.67.222.222"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 208.67.220.220"' >> /etc/openvpn/server.conf
        ;;
    5) #quad9
        echo 'push "dhcp-option DNS 9.9.9.9"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 149.112.112.112"' >> /etc/openvpn/server.conf
        ;;
    6) #quad9 uncensored
        echo 'push "dhcp-option DNS 9.9.9.10"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 149.112.112.10"' >> /etc/openvpn/server.conf
        ;;
    7) # NextDNS
        echo 'push "dhcp-option DNS 45.90.28.167"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 45.90.30.167"' >> /etc/openvpn/server.conf
        ;;
    8) #fdn
        echo 'push "dhcp-option DNS 80.67.169.40"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 80.67.169.12"' >> /etc/openvpn/server.conf
        ;;
    9) #dns.watch
        echo 'push "dhcp-option DNS 84.200.69.80"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 84.200.70.40"' >> /etc/openvpn/server.conf
        ;;
    10) #yandex basic
        echo 'push "dhcp-option DNS 77.88.8.8"' >> /etc/openvpn/server.conf
        echo 'push "dhcp-option DNS 77.88.8.1"' >> /etc/openvpn/server.conf
        ;;
    11) #current system resolve.conf
        if grep -q "127.0.0.53" "/etc/resolv.conf"; then
            RESOLVCONF='/run/systemd/resolve/resolv.conf'
        else
            RESOLVCONF='/etc/resolv.conf'
        fi
        sed -ne 's/^nameserver[[:space:]]\+\([^[:space:]]\+\).*$/\1/p' $RESOLVCONF | while read -r line; do
            if [[ $line =~ ^[0-9.]*$ ]]; then
                echo "push \"dhcp-option DNS $line\"" >>/etc/openvpn.conf
            fi
        done
        ;;
    esac
    echo 'push "redirect-gateway def1 bypass-dhcp"' >> /etc/openvpn/server.conf
    #compression
    if [[ $COMPRESSION == "y" ]]; then
        echo "compress $COMPRESSION_ALGO" >> /etc/openvpn/server.conf
    fi
    #dh
    if [[ $DH_TYPE == "1" ]]; then
        echo "dh none" >> /etc/openvpn/server.conf
        echo "ecdh-curve $DH_CURVE" >> /etc/openvpn/server.conf
    elif [[ $DH_TYPE == "2" ]]; then
        echo "dh dh.pem" >> /etc/openvpn/server.conf
    fi
    case $TLS_TYPE in
    1)
        echo "tls-crypt tls-crypt.key" >> /etc/openvpn/server.conf
        ;;
    2)
        echo "tls-auth tls-auth.key 0" >> /etc/openvpn/server.conf
        ;;
    esac
    echo "crl-verify crl.pem
ca ca.crt
cert $SERVER_NAME.crt
key $SERVER_NAME.key
auth $HMAC
cipher $DATA_CIPHER
ncp-ciphers $DATA_CIPHER
tls-server
tls-version-min 1.2
tls-cipher $CONTROL_CIPHER
topology subnet
server 10.8.0.0 255.255.255.0
keepalive 10 120
user nobody
group $NOGROUP
persist-key
persist-tun
ifconfig-pool-persist ipp.txt
status status.log
verb 3" >> /etc/openvpn/server.conf
    #if port is custom, change hardcoded port in selinux
    if hash sestatus 2>/dev/null; then
        if sestatus | grep "Current mode" | grep -qs "enforcing"; then
            if [[ $PORT != '1194' ]]; then
                semanage port -a -t openvpn_port_t -p "$PROTOCOL" "$PORT"
            fi
        fi
    fi
    #disable firewalld if it exists (AlmaLinux 8 and Rocky Linux 8)
    if [[ `systemctl is-active firewalld` ]]; then systemctl stop firewalld; systemctl disable firewalld; fi
    #setup openvpn-iptables service
    echo "[Unit]
Before=network.target
[Service]
Type=oneshot
ExecStart=$IPTABLESPATH -I INPUT -i $NETCARD -p $PROTOCOL --dport $PORT -m state --state NEW,ESTABLISHED -j ACCEPT
ExecStart=$IPTABLESPATH -I INPUT -i tun+ -j ACCEPT
ExecStart=$IPTABLESPATH -I FORWARD -i tun+ -j ACCEPT
ExecStart=$IPTABLESPATH -I FORWARD -i tun+ -o $NETCARD -m state --state RELATED,ESTABLISHED -j ACCEPT
ExecStart=$IPTABLESPATH -I FORWARD -i $NETCARD -o tun+ -m state --state RELATED,ESTABLISHED -j ACCEPT
ExecStart=$IPTABLESPATH -t nat -A POSTROUTING -s 10.8.0.0/24 -o $NETCARD -j MASQUERADE
ExecStart=$IPTABLESPATH -I OUTPUT -o tun+ -j ACCEPT
ExecStop=$IPTABLESPATH -D INPUT -i $NETCARD -p $PROTOCOL --dport $PORT -m state --state NEW,ESTABLISHED -j ACCEPT
ExecStop=$IPTABLESPATH -D INPUT -i tun+ -j ACCEPT
ExecStop=$IPTABLESPATH -D FORWARD -i tun+ -j ACCEPT
ExecStop=$IPTABLESPATH -D FORWARD -i tun+ -o $NETCARD -m state --state RELATED,ESTABLISHED -j ACCEPT
ExecStop=$IPTABLESPATH -D FORWARD -i $NETCARD -o tun+ -m state --state RELATED,ESTABLISHED -j ACCEPT
ExecStop=$IPTABLESPATH -t nat -D POSTROUTING -s 10.8.0.0/24 -o $NETCARD -j MASQUERADE
ExecStop=$IPTABLESPATH -D OUTPUT -o tun+ -j ACCEPT
RemainAfterExit=yes
[Install]
WantedBy=multi-user.target" > /etc/systemd/system/openvpn-iptables.service
    #enable openvpn-iptables service
    systemctl daemon-reload
    systemctl enable openvpn-iptables
    systemctl start openvpn-iptables
    if [[ $OS == 'arch' || $OS == 'fedora' || $OS == 'centos' || $OS == 'oracle' ]]; then
        cp /usr/lib/systemd/system/openvpn-server@.service /etc/systemd/system/openvpn-server@.service
        sed -i 's|LimitNPROC|#LimitNPROC|' /etc/systemd/system/openvpn-server@.service #openvz fix
        sed -i 's|/etc/openvpn/server|/etc/openvpn|' /etc/systemd/system/openvpn-server@.service
        systemctl daemon-reload
        systemctl enable openvpn-server@server
        systemctl restart openvpn-server@server
    elif [[ $OS == "ubuntu" ]] && [[ $VERSION_ID == "16.04" ]]; then
        systemctl enable openvpn
        systemctl start openvpn
    else
        cp /lib/systemd/system/openvpn@.service /etc/systemd/system/openvpn@.service
        sed -i 's|LimitNPROC|#LimitNPROC|' /etc/systemd/system/openvpn@.service #openvz fix
        sed -i 's|/etc/openvpn/server|/etc/openvpn|' /etc/systemd/system/openvpn@.service
        systemctl daemon-reload
        systemctl enable openvpn@server
        systemctl restart openvpn@server
    fi
    #generate common.ovpn
    echo "client" > /etc/openvpn/common.ovpn
    if [[ $PROTOCOL == 'udp' ]]; then
        echo "proto udp" >> /etc/openvpn/common.ovpn
        echo "explicit-exit-notify" >> /etc/openvpn/common.ovpn
    elif [[ $PROTOCOL == 'tcp' ]]; then
        echo "proto tcp-client" >> /etc/openvpn/common.ovpn
    fi
echo "remote $WANIP $PORT
dev tun
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name $SERVER_NAME name
auth $HMAC
auth-nocache
cipher $DATA_CIPHER
tls-client
tls-version-min 1.2
tls-cipher $CONTROL_CIPHER
ignore-unknown-option block-outside-dns
setenv opt block-outside-dns #fix win10 dns leak
verb 3" >> /etc/openvpn/common.ovpn
    if [[ $COMPRESSION == "y" ]]; then
        echo "compress $COMPRESSION_ALGO" >> /etc/openvpn/common.ovpn
    fi
    #generate ovpnmanager
    echo '#!/bin/bash
VER="'$VER'"
SCRIPTDIR=$PWD
CLRX=$(echo -e "\e[39m ") #color reset
CLRE=$(echo -e "\e[31m") #color light red
CLRS=$(echo -e "\e[32m") #color light green
CLRC=$(echo -e "\e[33m") #color light yellow
CLRQ=$(echo -e "\e[94m") #color light blue
CLRI=$(echo -e "\e[36m") #color cyan
SYME=$(echo -e "[x]")
SYMS=$(echo -e "[\xE2\x9C\x93]")
SYMC=$(echo -e "[!]")
SYMQ=$(echo -e "[?]")
SYMI=$(echo -e "[i]")
WELCOMEMSG="$CLRI
 ####################################################################
 ######################### OpenVPN Manager ##########################
 ######################### for Linux v$VER ##########################
 ####################################################################
 Latest version and documentation at:
      '$LINK'
$CLRX"
#root check
if [ "$EUID" -ne 0 ]; then
    echo -e "$CLRE $SYME Script must be run as root.$CLRX"
    exit 1
fi

if [[ $OS =~ (fedora|arch|centos|oracle) ]]; then
    SERVICE_NAME="openvpn-server@.service"
elif [[ $OS == "ubuntu" ]] && [[ $VERSION_ID == "16.04" ]]; then
    SERVICE_NAME="openvpn"
else
    SERVICE_NAME="openvpn@server"
fi

function osCheck() {
    if [[ -e /etc/debian_version ]]; then #debian, rasbian, ubuntu
        OS="debian"
        source /etc/os-release
    elif [[ -e /etc/system-release ]]; then #amzn, centos, fedora
        source /etc/os-release
        if [[ $ID == "fedora" || $ID_LIKE == "fedora" ]]; then
            OS="fedora"
        fi
        if [[ $ID == "centos" || $ID == "rocky" || $ID == "almalinux" ]]; then
            OS="centos"
        fi
        if [[ $ID == "amzn" ]]; then
            OS="amzn"
        fi
    elif [[ -e /etc/arch-release ]]; then #archlinux
        OS="arch"
    fi
}

function clientAdd() {
    until [[ $CLIENT =~ ^[a-zA-Z0-9_]+$ ]]; do
        read -rp "$CLRQ $SYMQ What is the client name (no spaces, no special characters)?$CLRX" -e CLIENT
        echo ""
    done
    #pass
    until [[ $PASS =~ (y|n) ]]; do
        read -rp "$CLRQ $SYMQ Do you want to ecrypt the private key with a password? [y/n]:$CLRX" -e -i n PASS
        echo ""
    done
    EXISTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c -E "/CN=$CLIENT\$")
    if [[ $EXISTS == "1" ]]; then
        echo "$CLRC $SYMC Client \"$CLIENT\" already exists. Please choose another name.$CLRX"
        exit
    else
        cd /etc/openvpn/easy-rsa/
        case $PASS in
        n)
            EASYRSA_CA_EXPIRE=3650 ./easyrsa --batch build-client-full "$CLIENT" nopass
            ;;
        y)
            EASYRSA_CA_EXPIRE=3650 ./easyrsa --batch build-client-full "$CLIENT"
            ;;
        esac
        #detect tls-auth or tls-crypt
        if grep -qs "^tls-crypt" /etc/openvpn/server.conf; then
            TLS_TYPE="1"
        elif grep -qs "^tls-auth" /etc/openvpn/server.conf; then
            TLS_TYPE="2"
        fi
        cat /etc/openvpn/common.ovpn > /etc/openvpn/client/$CLIENT.ovpn
        echo "<ca>" >> /etc/openvpn/client/$CLIENT.ovpn
        cat /etc/openvpn/easy-rsa/pki/ca.crt >> /etc/openvpn/client/$CLIENT.ovpn
        echo "</ca>" >> /etc/openvpn/client/$CLIENT.ovpn
        echo "<cert>" >> /etc/openvpn/client/$CLIENT.ovpn
        sed -ne "/BEGIN CERTIFICATE/,$ p" /etc/openvpn/easy-rsa/pki/issued/$CLIENT.crt >> /etc/openvpn/client/$CLIENT.ovpn
        echo "</cert>" >> /etc/openvpn/client/$CLIENT.ovpn
        echo "<key>" >> /etc/openvpn/client/$CLIENT.ovpn
        cat /etc/openvpn/easy-rsa/pki/private/$CLIENT.key >> /etc/openvpn/client/$CLIENT.ovpn
        echo "</key>" >> /etc/openvpn/client/$CLIENT.ovpn
        case $TLS_TYPE in
        1)
            echo "<tls-crypt>" >> /etc/openvpn/client/$CLIENT.ovpn
            sed -ne "/BEGIN OpenVPN Static key/,$ p" /etc/openvpn/tls-crypt.key >> /etc/openvpn/client/$CLIENT.ovpn
            echo "</tls-crypt>" >> /etc/openvpn/client/$CLIENT.ovpn
            ;;
        2)
            echo "key-direction 1" >> /etc/openvpn/client/$CLIENT.ovpn
            echo "<tls-auth>" >> /etc/openvpn/client/$CLIENT.ovpn
            sed -ne "/BEGIN OpenVPN Static key/,$ p" /etc/openvpn/tls-auth.key >> /etc/openvpn/client/$CLIENT.ovpn
            echo "</tls-auth>" >> /etc/openvpn/client/$CLIENT.ovpn
            ;;
        esac
        echo "$CLRS $SYMS Your new $CLIENT certificate is located at: $CLRI/etc/openvpn/client/$CLIENT.ovpn$CLRX"
    fi
}

function clientList() {
    CLIENTTOTAL=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^V")
    if [[ $CLIENTTOTAL == "0" ]]; then
        echo "$CLRC $SYMC You have no clients to list.$CLRX"
        exit 1
    fi
    echo "$CLRI $SYMI List of current active clients:"
    tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d "=" -f 2 | nl -s ") "
    echo -n "$CLRX"
}

function clientRevoke() {
    CLIENTTOTAL=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c "^V")
    if [[ $CLIENTTOTAL == "0" ]]; then
        echo "$CLRC $SYMC There are no client certificates to revoke.$CLRX"
        exit 1
    fi
    if [[ $CLIENTTOTAL == "1" ]]; then
        helpText="1"
    else
        helpText="1-$CLIENTTOTAL"
    fi
    echo "$CLRI $SYMI List of current active certificates:"
    tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d "=" -f 2 | nl -s ") "
    until [[ $CLIENTNUM -ge 1 && $CLIENTNUM -le $CLIENTTOTAL ]]; do
        read -rp "$CLRQ $SYMQ Which client you want to revoke? [$helpText]:$CLRX" CLIENTNUM
        echo ""
    done
    CERTNAME=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep "^V" | cut -d "=" -f 2 | sed -n "$CLIENTNUM"p)
    cd /etc/openvpn/easy-rsa/
    ./easyrsa --batch revoke $CERTNAME
    EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl
    rm -f /etc/openvpn/crl.pem
    cp pki/crl.pem /etc/openvpn/crl.pem
    chmod 644 /etc/openvpn/crl.pem
    rm -f "/etc/openvpn/client/$CERTNAME.ovpn"
    sed -i "/^$CERTNAME,.*/d" /etc/openvpn/ipp.txt
    openvpnRestart
    echo "$CLRS $SYMS Certificate for $CERTNAME revoked successfully.$CLRX"
}

function openvpnLogs() {
    journalctl -u $SERVICE_NAME -f -n 30
}

function openvpnRestart () {
    systemctl stop $SERVICE_NAME
    systemctl stop openvpn-iptables
    systemctl start openvpn-iptables
    systemctl start $SERVICE_NAME
    if [[ ! "$(systemctl is-active $SERVICE_NAME)" == "active" ]]; then
        echo "$CLRE $SYME OpenVPN is not running.$CLRX"
    elif [[ ! "$(systemctl is-active openvpn-iptables)" == "active" ]]; then
        echo "$CLRE $SYME OpenVPN-iptables is not running.$CLRX"
    else
        echo "$CLRS $SYMS OpenVPN restarted successfully.$CLRX"
    fi
}

function openvpnUninstall() {
    osCheck
    until [[ $UNINSTALL  =~ (y|n) ]]; do
        read -rp "$CLRQ $SYMQ Are you sure you want to uninstall OpenVPN server?$CLRX" -e -i n  UNINSTALL
        echo ""
    done
    if [[ $UNINSTALL == "y" ]]; then
        #get openvpn confs from server.conf
        PORT=$(grep "^port " /etc/openvpn/server.conf | cut -d " " -f 2)
        PROTOCOL=$(grep "^proto " /etc/openvpn/server.conf | cut -d " " -f 2)
        #stop, disable and cleanup openvpn server service
        systemctl stop $SERVICE_NAME
        systemctl disable $SERVICE_NAME
        if [[ $OS =~ (fedora|arch|centos|oracle) ]]; then
            rm /etc/systemd/system/openvpn-server@.service
        else
            rm /etc/systemd/system/openvpn\@.service
        fi
        #stop, disable and cleanup openvpn-iptables
        systemctl stop openvpn-iptables
        systemctl disable openvpn-iptables
        rm /etc/systemd/system/openvpn-iptables.service
        #apply changes
        systemctl daemon-reload
        #selinux
        if hash sestatus 2>/dev/null; then
            if sestatus | grep "Current mode" | grep -qs "enforcing"; then
                if [[ $PORT != "1194" ]]; then
                    semanage port -d -t openvpn_port_t -p "$PROTOCOL" "$PORT"
                fi
            fi
        fi
        #uninstall
        if [[ $OS =~ (debian|ubuntu) ]]; then
            apt-get remove --purge -y openvpn
            if [[ -e /etc/apt/sources.list.d/openvpn.list ]]; then
                rm /etc/apt/sources.list.d/openvpn.list
                apt-get update
            fi
        elif [[ $OS == "arch" ]]; then
            pacman --noconfirm -R openvpn
        elif [[ $OS =~ (centos|amzn|oracle) ]]; then
            yum remove -y openvpn
        elif [[ $OS == "fedora" ]]; then
            dnf remove -y openvpn
        fi
        #cleanup
        rm -rf /etc/openvpn
        rm -rf /usr/share/doc/openvpn*
        rm -f /etc/sysctl.d/99-openvpn.conf
        rm -- "$(dirname $(readlink -f $0))/$(basename $0)";
        echo "$CLRS $SYMS OpenVPN uninstalled successfully.$CLRX"
    else
        echo "$CLRI $SYMI OpenVPN uninstall canceled. Nothing was changed.$CLRX"
    fi
}

function openvpnManage() {
    echo "$WELCOMEMSG"
    until [[ $MENU =~ ^[1-7]$ ]]; do
        echo "$CLRI $SYMI OpenVPN Manage Menu:"
        echo "      1- Add a new client"
        echo "      2- List active clients"
        echo "      3- Revoke existing client"
        echo "      4- Debug OpenVPN using journalctl"
        echo "      5- Restart OpenVPN service"
        echo "      6- Uninstall OpenVPN"
        echo "      7- Exit$CLRX"
        read -rp "$CLRQ $SYMQ What do you want to do? [1-5]:$CLRX" MENU
        echo ""
    done
    case $MENU in
    1)
        clientAdd
        ;;
    2)
        clientList
        ;;
    3)
        clientRevoke
        ;;
    4)
        openvpnLogs
        ;;
    5)
        openvpnRestart
        ;;
    6)
        openvpnUninstall
        ;;
    7)
        exit
        ;;
    esac
}
openvpnManage' > /usr/sbin/lmovpn
    chmod +x /usr/sbin/lmovpn

    ############################################################################
    ########## FINISHING #######################################################
    ############################################################################
    echo "$CLRS $SYMS OpenVPN was installed and configured successfully on $WANIP:$PORT ${PROTOCOL^^}.$CLRX"
    echo "$CLRI $SYMI Please open port $PORT ${PROTOCOL^^} on your router."
    echo "$CLRI $SYMI Use ${CLRS}\"sudo lmovpn\"${CLRI} to manage your OpenVPN server.$CLRX"
    #cleanup
    rm -- "$SCRIPTDIR/$(basename $0)"
}

init
osCheck
installOvpn
